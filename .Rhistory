type_dif <- paste0(type_dif_main, "_", type_dif_sec)
name_image <- paste0(type_dif, suffix_null)
r_old <- raster(paste0("results/", SITIO,"/", name_image,".tif"))
m_old_b <- mapview(r_old, na.color =NA, alpha = 0.8, legend=F,
col.regions ="cyan",
layer.name = paste0(name_image, "_GEE"))
# C
type_dif_sec <- "LMR"
type_dif <- paste0(type_dif_main, "_", type_dif_sec)
name_image <- paste0(type_dif, suffix_null)
r_old <- raster(paste0("results/", SITIO,"/", name_image,".tif"))
m_old_c <- mapview(r_old, na.color =NA, alpha = 0.8, legend=F,
col.regions ="navy",
layer.name = paste0(name_image, "_GEE"))
sar_map_old <- rgb_img + m_old_a + m_old_b + m_old_c
type_dif_main <- "TTS"
type_dif_sec <- "DD"
type_dif_sec <- "DD"
type_dif <- paste0(type_dif_main, "_", type_dif_sec)
name_image <- paste0(type_dif, suffix)
name_image
type_dif_sec <- "DD"
type_dif <- paste0(type_dif_main, "_", type_dif_sec)
name_image <- paste0(type_dif, suffix)
r_new <- raster(paste0("results/", SITIO,"/", name_image,".tif"))
r_new
m_new_a <- mapview(r_new, na.color =NA, alpha = 0.8, legend=F,
col.regions ="magenta",
layer.name = name_image)
# B
type_dif_sec <- "EDI"
type_dif <- paste0(type_dif_main, "_", type_dif_sec)
name_image <- paste0(type_dif, suffix)
r_new <- raster(paste0("results/", SITIO,"/", name_image,".tif"))
m_new_b <- mapview(r_new, na.color =NA, alpha = 0.8, legend=F,
col.regions ="cyan",
layer.name =name_image)
# C
type_dif_sec <- "LMR"
type_dif <- paste0(type_dif_main, "_", type_dif_sec)
name_image <- paste0(type_dif, suffix)
r_new <- raster(paste0("results/", SITIO,"/", name_image,".tif"))
m_new_c <- mapview(r_new, na.color =NA, alpha = 0.8, legend=F,
col.regions ="navy",
layer.name =name_image)
sar_map_old <- rgb_img + m_old_a + m_old_b + m_old_c
sar_map_new <- rgb_img + m_new_a + m_new_b + m_new_c
type_dif
sar_map_old <- rgb_img + m_old_a + m_old_b + m_old_c
sar_map_new <- rgb_img + m_new_a + m_new_b + m_new_c
sync_map <- sync(sar_map_old, sar_map_new)
save_map_sync(map =  sync_map,
name = paste0(type_dif_main, "_roi_sync"),
path_out = path_html)
sar_map_old <- rgb_img + m_old_c + m_old_a + m_old_b
sar_map_new <- rgb_img + m_new_c + m_new_a + m_new_b
sync_map <- sync(sar_map_old, sar_map_new)
save_map_sync(map =  sync_map,
name = paste0(type_dif_main, "_roi_sync"),
path_out = path_html)
img1 <- raster(paste0("data/turberas/tif/", SITIO, "/MEDIAN_VH_2016_asf_s1_grd.tif"))
img2 <-raster(paste0("data/turberas/tif/", SITIO, "/MEDIAN_VH_2023_asf_s1_grd.tif"))
sar_map_gee <- rgb_img +
mapview(img1_vh, layer.name = "img1_vh_gee") +
mapview(img2_vh, layer.name = "img2_vh_gee")
sar_map_odc <- rgb_img +
mapview(img1, layer.name = "img1_vh_odc") +
mapview(img2, layer.name = "img2_vh_odc")
img1 <- raster(paste0("data/turberas/tif/", SITIO, "/MEDIAN_VH_2016_asf_s1_grd.tif"))
img2 <-raster(paste0("data/turberas/tif/", SITIO, "/MEDIAN_VH_2023_asf_s1_grd.tif"))
img1 <- raster(paste0("data/turberas/tif/", SITIO, "/MEDIAN_VH_2016_asf_s1_grd.tif"))
img2 <-raster(paste0("data/turberas/tif/", SITIO, "/MEDIAN_VH_2023_asf_s1_grd.tif"))
sar_map_gee <- rgb_img +
mapview(img1_vh, layer.name = "img1_vh_gee", na.color =NA, alpha = 0.8, legend=F) +
mapview(img2_vh, layer.name = "img2_vh_gee", na.color =NA, alpha = 0.8, legend=F)
sar_map_odc <- rgb_img +
mapview(img1, layer.name = "img1_vh_odc") +
mapview(img2, layer.name = "img2_vh_odc")
sync_map <- sync(sar_map_gee, sar_map_odc)
sync_map
sar_map_gee <- rgb_img +
mapview(img1_vh, layer.name = "img1_vh_gee", na.color =NA, alpha = 0.8, legend=F) +
mapview(img2_vh, layer.name = "img2_vh_gee", na.color =NA, alpha = 0.8, legend=F)
sar_map_odc <- rgb_img +
mapview(img1, layer.name = "img1_vh_odc", na.color =NA, alpha = 0.8, legend=F) +
mapview(img2, layer.name = "img2_vh_odc", na.color =NA, alpha = 0.8, legend=F)
sync_map <- sync(sar_map_gee, sar_map_odc)
save_map_sync(map =  sync_map, name = "SAR_roi_sync", path_out = path_html)
sar_map_gee <- rgb_img +
mapview(img1_vh, layer.name = "img1_vh_gee", na.color =NA, alpha = 0.5, legend=F) +
mapview(img2_vh, layer.name = "img2_vh_gee", na.color =NA, alpha = 0.5, legend=F)
sar_map_odc <- rgb_img +
mapview(img1, layer.name = "img1_vh_odc", na.color =NA, alpha = 0.5, legend=F) +
mapview(img2, layer.name = "img2_vh_odc", na.color =NA, alpha = 0.5, legend=F)
sync_map <- sync(sar_map_gee, sar_map_odc)
save_map_sync(map =  sync_map, name = "SAR_roi_sync", path_out = path_html)
alpha_layer <- 0.5
sar_map_gee <- rgb_img +
mapview(img1_vh, layer.name = "img1_vh_gee", na.color =NA, alpha = alpha_layer, legend=F) +
mapview(img2_vh, layer.name = "img2_vh_gee", na.color =NA, alpha = alpha_layer, legend=F)
sar_map_odc <- rgb_img +
mapview(img1, layer.name = "img1_vh_odc", na.color =NA, alpha = alpha_layer, legend=F) +
mapview(img2, layer.name = "img2_vh_odc", na.color =NA, alpha = alpha_layer, legend=F)
sync_map <- sync(sar_map_gee, sar_map_odc)
save_map_sync(map =  sync_map, name = "SAR_roi_sync", path_out = path_html)
sync_map <- sync(sar_map_gee, sar_map_odc)
save_map_sync(map =  sync_map, name = "SAR_roi_sync", path_out = path_html)
sar_map_gee <- rgb_img +
mapview(img1_vh, layer.name = "img1_vh_gee", na.color =NA, alpha = alpha_layer, legend=F) +
mapview(img2_vh, layer.name = "img2_vh_gee", na.color =NA, alpha = alpha_layer, legend=F)
sar_map_odc <- rgb_img +
mapview(img1, layer.name = "img1_vh_odc", na.color =NA, alpha = alpha_layer, legend=F) +
mapview(img2, layer.name = "img2_vh_odc", na.color =NA, alpha = alpha_layer, legend=F)
sync_map <- sync(sar_map_gee, sar_map_odc)
save_map_sync(map =  sync_map, name = "SAR_roi_sync", path_out = path_html)
setwd("~/Library/CloudStorage/OneDrive-UniversidadAdolfoIbanez/MasterDataScience/tesis/CNN-Change-Detection/presentaciones/avance_tesis")
?pandoc_self_contained_html
htmlwidgets:::pandoc_self_contained_html
save_map_sync <- function (map_sync, path_out, name = "map", selfcontained = F, libdir = "./lib",  show=T)
{
make_dir(path_out)
file <- paste0(path_out, "/", name,".html") %>%
gsub(patter="//", replacement = "/", .)
if (is.null(libdir)) {
libdir <- paste(tools::file_path_sans_ext(basename(file)),
"_files", sep = "")
}
htmltools::save_html(map_sync, file = file, libdir = libdir)
if (selfcontained) {
# if (!htmlwidgets:::pandoc_available()) {
#   stop("Saving a widget with selfcontained = TRUE requires pandoc. For details see:\n",
#        "https://github.com/rstudio/rmarkdown/blob/master/PANDOC.md")
# }
htmlwidgets:::pandoc_self_contained_html(file, file)
unlink(libdir, recursive = TRUE)
}
if(isTRUE(show)){
utils::browseURL(file)
}
return(print(paste0("Mapa web guardado en: ", file)))
# https://github.com/r-spatial/mapview/issues/35
}
img1_vh <- raster(paste0("data/turberas/tif/", SITIO, "/S1_GRD_SAR_VH_1S_2017.tif"))
img1_vv <- raster(paste0("data/turberas/tif/", SITIO, "/S1_GRD_SAR_VV_1S_2017.tif"))
img2_vh <- raster(paste0("data/turberas/tif/",SITIO,  "/S1_GRD_SAR_VH_1S_2023.tif"))
img2_vv <- raster(paste0("data/turberas/tif/",SITIO,  "/S1_GRD_SAR_VV_1S_2023.tif"))
img1 <- raster(paste0("data/turberas/tif/", SITIO, "/MEDIAN_VH_2016_asf_s1_grd.tif"))
# Opciones Generales ------------------------------------------------------
options(browser="/usr/bin/open -a 'Google Chrome'")
setwd("../../book-change-detection/")
# Librerias ---------------------------------------------------------------
library(raster)
library(mapview)
library(leafsync)
# Recursos ----------------------------------------------------------------
source("R/DI.R")
source("R/graphics.R")
source("R/functions.R")
source("R/utils_image.R")
source("R/Douglas-Peucker.R")
source("R/log_mean_ratio.R")
# Paletas -----------------------------------------------------------------
palette_grey <- grey(1:100/100)
palette_rainbow <- rainbow(100)
# Si no existe directorio lo crea
make_dir <- function(path){
if (!dir.exists(path)){
print(paste0("Directorio Creado: ", path))
dir.create(path, recursive = TRUE)
}
}
make_map_web <- function(map, name, path_out, show=T){
make_dir(path_out)
path_out_html <- paste0(path_out, "/", name,".html") %>%
gsub(patter="//", replacement = "/", .)
mapview::mapshot(map, url = path_out_html)
if(isTRUE(show)){
utils::browseURL(path_out_html)
}
print(paste0("Mapa web guardado en: ", path_out_html))
}
delete_black <- function(path_tif){
img_rbg <- terra::rast(path_tif) %>%
raster::brick() %>%
subset(c(1, 2, 3))
# set all values with 0 to NA
vals = values(img_rbg)
idx = which(rowSums(vals) == 0)
vals[idx, ] = cbind(NA, NA, NA)
img_rbg = setValues(img_rbg, vals)
return(img_rbg)
}
save_map_sync <- function (map_sync, path_out, name = "map", selfcontained = F, libdir = "./lib",  show=T)
{
make_dir(path_out)
file <- paste0(path_out, "/", name,".html") %>%
gsub(patter="//", replacement = "/", .)
if (is.null(libdir)) {
libdir <- paste(tools::file_path_sans_ext(basename(file)),
"_files", sep = "")
}
htmltools::save_html(map_sync, file = file, libdir = libdir)
if (selfcontained) {
# if (!htmlwidgets:::pandoc_available()) {
#   stop("Saving a widget with selfcontained = TRUE requires pandoc. For details see:\n",
#        "https://github.com/rstudio/rmarkdown/blob/master/PANDOC.md")
# }
htmlwidgets:::pandoc_self_contained_html(file, file)
unlink(libdir, recursive = TRUE)
}
if(isTRUE(show)){
utils::browseURL(file)
}
return(print(paste0("Mapa web guardado en: ", file)))
# https://github.com/r-spatial/mapview/issues/35
}
SITIO <- "ST_021"
suffix <- "_ODC"
suffix_null <- ""
path_avence <- "../presentaciones/avance_tesis"
path_html <- paste0(path_avence, "/html/", SITIO)
alpha_layer <- 0.8
# ViewRGB -----------------------------------------------------------------
# RGB
st_2017 <- delete_black(paste0("results/", SITIO, "/", SITIO,"_2017_RGB_reproy.tif"))
st_2022 <- delete_black(paste0("results/", SITIO, "/", SITIO,"_2021_RGB_reproy.tif"))
m_2017 <- viewRGB(st_2017, r = 1, g = 2, b = 3, layer.name = "RBG_2017",
na.color = "transparent", quantiles = NULL)
m_2022 <- viewRGB(st_2022, r = 1, g = 2, b = 3, layer.name = "RBG_2022",
na.color = "transparent", quantiles = NULL)
rgb_img <- m_2017 + m_2022
img1_vh <- raster(paste0("data/turberas/tif/", SITIO, "/S1_GRD_SAR_VH_1S_2017.tif"))
img1_vv <- raster(paste0("data/turberas/tif/", SITIO, "/S1_GRD_SAR_VV_1S_2017.tif"))
img2_vh <- raster(paste0("data/turberas/tif/",SITIO,  "/S1_GRD_SAR_VH_1S_2023.tif"))
img2_vv <- raster(paste0("data/turberas/tif/",SITIO,  "/S1_GRD_SAR_VV_1S_2023.tif"))
img1 <- raster(paste0("data/turberas/tif/", SITIO, "/MEDIAN_VH_2016_asf_s1_grd.tif"))
img2 <-raster(paste0("data/turberas/tif/", SITIO, "/MEDIAN_VH_2023_asf_s1_grd.tif"))
sar_map_gee <- rgb_img +
mapview(img1_vh, layer.name = "img1_vh_gee", na.color =NA, alpha = alpha_layer, legend=F) +
mapview(img2_vh, layer.name = "img2_vh_gee", na.color =NA, alpha = alpha_layer, legend=F)
sar_map_odc <- rgb_img +
mapview(img1, layer.name = "img1_vh_odc", na.color =NA, alpha = alpha_layer, legend=F) +
mapview(img2, layer.name = "img2_vh_odc", na.color =NA, alpha = alpha_layer, legend=F)
sync_map <- sync(sar_map_gee, sar_map_odc)
save_map_sync <- function (map_sync, path_out, name = "map", selfcontained = T, libdir = "./lib",  show=T)
{
make_dir(path_out)
file <- paste0(path_out, "/", name,".html") %>%
gsub(patter="//", replacement = "/", .)
if (is.null(libdir)) {
libdir <- paste(tools::file_path_sans_ext(basename(file)),
"_files", sep = "")
}
htmltools::save_html(map_sync, file = file, libdir = libdir)
if (selfcontained) {
# if (!htmlwidgets:::pandoc_available()) {
#   stop("Saving a widget with selfcontained = TRUE requires pandoc. For details see:\n",
#        "https://github.com/rstudio/rmarkdown/blob/master/PANDOC.md")
# }
htmlwidgets:::pandoc_self_contained_html(file, file)
unlink(libdir, recursive = TRUE)
}
if(isTRUE(show)){
utils::browseURL(file)
}
return(print(paste0("Mapa web guardado en: ", file)))
# https://github.com/r-spatial/mapview/issues/35
}
make_map_web(map = rgb_img, name = "RGB_roi", path_out = path_html)
img1_vh <- raster(paste0("data/turberas/tif/", SITIO, "/S1_GRD_SAR_VH_1S_2017.tif"))
img1_vv <- raster(paste0("data/turberas/tif/", SITIO, "/S1_GRD_SAR_VV_1S_2017.tif"))
save_map_sync(map =  sync_map, name = "SAR_roi_sync", path_out = path_html)
type_dif <-  "DD"
name_image <- paste0(type_dif, suffix_null)
r_old <- raster(paste0("results/", SITIO,"/", name_image,".tif"))
m_old <- mapview(r_old, na.color =NA, alpha = alpha_layer, legend=F,
layer.name = paste0(name_image, "_GEE"))
name_new <- paste0(type_dif, suffix)
r_new <- raster(paste0("results/", SITIO,"/", name_new,".tif"))
m_new <- mapview(r_new, na.color =NA, alpha = alpha_layer, legend=F,
layer.name = name_new)
sar_map_old <- rgb_img + m_old
sar_map_new <- rgb_img + m_new
sync_map <- sync(sar_map_old, sar_map_new)
save_map_sync(map =  sync_map,
name = paste0(type_dif, "_roi_sync"),
path_out = path_html)
# Log Ratio ---------------------------------------------------------------
type_dif <-  "LR"
name_image <- paste0(type_dif, suffix_null)
r_old <- raster(paste0("results/", SITIO,"/", name_image,".tif"))
m_old <- mapview(r_old, na.color =NA, alpha = alpha_layer, legend=F,
layer.name = paste0(name_image, "_GEE"))
name_new <- paste0(type_dif, suffix)
r_new <- raster(paste0("results/", SITIO,"/", name_new,".tif"))
m_new <- mapview(r_new, na.color =NA, alpha = alpha_layer, legend=F,
layer.name = name_new)
sar_map_old <- rgb_img + m_old
sar_map_new <- rgb_img + m_new
sync_map <- sync(sar_map_old, sar_map_new)
save_map_sync(map =  sync_map,
name = paste0(type_dif, "_roi_sync"),
path_out = path_html)
save_map_sync <- function (map_sync, path_out, name = "map", selfcontained = F, libdir = "./lib",  show=T)
{
make_dir(path_out)
file <- paste0(path_out, "/", name,".html") %>%
gsub(patter="//", replacement = "/", .)
if (is.null(libdir)) {
libdir <- paste(tools::file_path_sans_ext(basename(file)),
"_files", sep = "")
}
htmltools::save_html(map_sync, file = file, libdir = libdir)
if (selfcontained) {
# if (!htmlwidgets:::pandoc_available()) {
#   stop("Saving a widget with selfcontained = TRUE requires pandoc. For details see:\n",
#        "https://github.com/rstudio/rmarkdown/blob/master/PANDOC.md")
# }
htmlwidgets:::pandoc_self_contained_html(file, file)
unlink(libdir, recursive = TRUE)
}
if(isTRUE(show)){
utils::browseURL(file)
}
return(print(paste0("Mapa web guardado en: ", file)))
# https://github.com/r-spatial/mapview/issues/35
}
SITIO <- "ST_021"
suffix <- "_ODC"
suffix_null <- ""
path_avence <- "../presentaciones/avance_tesis"
path_html <- paste0(path_avence, "/html/", SITIO)
alpha_layer <- 0.8
img1 <- raster(paste0("data/turberas/tif/", SITIO, "/MEDIAN_VH_2016_asf_s1_grd.tif"))
img2 <-raster(paste0("data/turberas/tif/", SITIO, "/MEDIAN_VH_2023_asf_s1_grd.tif"))
sar_map_gee <- rgb_img +
mapview(img1_vh, layer.name = "img1_vh_gee", na.color =NA, alpha = alpha_layer, legend=F) +
mapview(img2_vh, layer.name = "img2_vh_gee", na.color =NA, alpha = alpha_layer, legend=F)
sar_map_odc <- rgb_img +
mapview(img1, layer.name = "img1_vh_odc", na.color =NA, alpha = alpha_layer, legend=F) +
mapview(img2, layer.name = "img2_vh_odc", na.color =NA, alpha = alpha_layer, legend=F)
sync_map <- sync(sar_map_gee, sar_map_odc)
save_map_sync(map =  sync_map, name = "SAR_roi_sync", path_out = path_html)
type_dif <-  "DD"
name_image <- paste0(type_dif, suffix_null)
r_old <- raster(paste0("results/", SITIO,"/", name_image,".tif"))
m_old <- mapview(r_old, na.color =NA, alpha = alpha_layer, legend=F,
layer.name = paste0(name_image, "_GEE"))
name_new <- paste0(type_dif, suffix)
r_new <- raster(paste0("results/", SITIO,"/", name_new,".tif"))
m_new <- mapview(r_new, na.color =NA, alpha = alpha_layer, legend=F,
layer.name = name_new)
sar_map_old <- rgb_img + m_old
sar_map_new <- rgb_img + m_new
sync_map <- sync(sar_map_old, sar_map_new)
save_map_sync(map =  sync_map,
name = paste0(type_dif, "_roi_sync"),
path_out = path_html)
type_dif <-  "DD"
name_image <- paste0(type_dif, suffix_null)
r_old <- raster(paste0("results/", SITIO,"/", name_image,".tif"))
m_old <- mapview(r_old, na.color =NA, alpha = alpha_layer, legend=F,
layer.name = paste0(name_image, "_GEE"))
name_new <- paste0(type_dif, suffix)
r_new <- raster(paste0("results/", SITIO,"/", name_new,".tif"))
m_new <- mapview(r_new, na.color =NA, alpha = alpha_layer, legend=F,
layer.name = name_new)
name_new
r_new <- raster(paste0("results/", SITIO,"/", name_new,".tif"))
m_new <- mapview(r_new, na.color =NA, alpha = alpha_layer, legend=F,
layer.name = name_new)
m_new
r_new
name_new
plot(r_new)
name_new <- paste0(type_dif, suffix)
r_new <- raster(paste0("results/", SITIO,"/", name_new,".tif"))
m_new <- mapview(r_new, na.color =NA, alpha = alpha_layer, legend=F,
layer.name = name_new)
sar_map_old <- rgb_img + m_old
sar_map_new <- rgb_img + m_new
sync_map <- sync(sar_map_old, sar_map_new)
save_map_sync(map =  sync_map,
name = paste0(type_dif, "_roi_sync"),
path_out = path_html)
# Log Ratio ---------------------------------------------------------------
type_dif <-  "LR"
name_image <- paste0(type_dif, suffix_null)
r_old <- raster(paste0("results/", SITIO,"/", name_image,".tif"))
m_old <- mapview(r_old, na.color =NA, alpha = alpha_layer, legend=F,
layer.name = paste0(name_image, "_GEE"))
name_new <- paste0(type_dif, suffix)
r_new <- raster(paste0("results/", SITIO,"/", name_new,".tif"))
m_new <- mapview(r_new, na.color =NA, alpha = alpha_layer, legend=F,
layer.name = name_new)
sar_map_old <- rgb_img + m_old
sar_map_new <- rgb_img + m_new
sync_map <- sync(sar_map_old, sar_map_new)
save_map_sync(map =  sync_map,
name = paste0(type_dif, "_roi_sync"),
path_out = path_html)
library(tidyverse)
library(DT)
tab_gral <- readRDS("results/tabs/sam/MC_SAM_tab.rds") %>%
mutate_if(is.numeric, round, 2)
datatable(tab_gral, class = 'cell-border stripe',  rownames = FALSE,
filter = 'top', options = list(pageLength = 10,
autoWidth = FALSE))%>%
DT::formatStyle(columns = colnames(.),  fontSize = '10px')
library(plotly)
library(viridis)
table_longer <- tab_gral %>%
pivot_longer(cols = DD:DD_pad_mean, names_to = "method", values_to = "values") %>%
filter(!method %in% c("DD_pad_mean", "DD_denoised")) %>%
mutate(change = as.factor(change))
p2 <- ggplot(data = table_longer,
mapping = aes(x = method, y = values, fill = change)) +
geom_boxplot(outlier.color = "gray70",
position = position_dodge(width = 10))+
scale_fill_viridis(discrete = TRUE, alpha=0.9, option="D") +
theme_minimal()+
theme(
plot.title = element_text(size=11, face = "bold"),
plot.subtitle = element_text(size=10)
) +
ggtitle(label =  "Métodos Convencionales",
subtitle = "Cálculo de Diferencias") +
xlab("Diferencias")+
ylab("Promedio")
ggplotly(p2,  width = 800, height = 500,
tooltip = c("ID", "change", "method", "values"))
tab_mean <- readRDS("results/tabs/MC_sam_tab_wider_mean.rds") %>%
mutate_if(is.numeric, round, 2)
tab_mean <- readRDS("results/tabs/sam/MC_SAM_tab_wider_mean.rds") %>%
mutate_if(is.numeric, round, 2)
datatable(tab_mean, class = 'cell-border stripe',  rownames = FALSE,
filter = 'top', options = list(pageLength = 10,
autoWidth = FALSE))%>%
DT::formatStyle(columns = colnames(.),  fontSize = '10px')
merge_tabs <- readRDS("results/tabs/sam/MC_SAM_tab_mean.rds") %>%
mutate_if(is.numeric, round, 2)
mt <- merge_tabs %>% filter(!Method %in% c("DD_pad_mean", "DD_denoised")) %>%
mutate(change = as.factor(change))
p1 <- ggplot(data = mt,
mapping = aes(x = Method, y = Mean, fill = change)) +
geom_bar(stat = "identity", position="dodge")+
scale_fill_viridis(discrete = TRUE, alpha=0.9, option="D") +
theme_minimal()+
theme(
plot.title = element_text(size=11, face = "bold"),
plot.subtitle = element_text(size=10)
) +
ggtitle(label =  "Métodos Convencionales",
subtitle = "Cálculo de Diferencias") +
xlab("Diferencias")+
ylab("Promedio")
ggplotly(p1,  width = 800, height = 500)
library(tidyverse)
library(tidyverse)
library(DT)
tab_gral <- readRDS("results/tabs/global_raw_mc.rds") %>%
mutate_if(is.numeric, round, 2)
datatable(tab_gral, class = 'cell-border stripe',  rownames = FALSE,
filter = 'top', options = list(pageLength = 10,
autoWidth = FALSE))%>%
DT::formatStyle(columns = colnames(.),  fontSize = '10px')
tab_gral <- readRDS("results/tabs/global_mc.rds") %>%
mutate_if(is.numeric, round, 2)
datatable(tab_gral, class = 'cell-border stripe',  rownames = FALSE,
filter = 'top', options = list(pageLength = 10,
autoWidth = FALSE))%>%
DT::formatStyle(columns = colnames(.),  fontSize = '10px')
r_bar <- readRDS("results/tabs/global_mc_plot.rds")
r_bar
names(r_bar)
names(r_bar) <- var_metrics
r_bar
graph <- r_bar[[1]]
graph
ggplotly(graph,  width = 800, height = 500)
library(plotly)
ggplotly(graph,  width = 800, height = 500)
tab_gral <- readRDS("results/tabs/global_mc.rds") %>%
mutate_if(is.numeric, round, 2)
tab_gral
metrics <-  var_metrics[1]
metrics
var_metrics
var_metrics <- c("precision", "recall", "accuracy", "F1_score", "iou")
names(r_bar) <- var_metrics
var_metrics
names(r_bar)
metrics <-  var_metrics[1]
metrics
graph <- r_bar[metrics]
graph
ggplotly(graph,  width = 600, height = 400)
names(tab_gral)
tab_m <- tab_gral %>%
select(method, estado,matches(metrics),  TP, TN, FP, FN)
tab_m
toupper()
?toupper()
metrics <-  var_metrics[2]
metrics
metrics <-  var_metrics[3]
metrics
source("~/.active-rstudio-document", echo=TRUE)
r_bar <- readRDS("results/tabs/global_mc_plot_sam.rds")
global_mc_sam <- readRDS("/Users/denisberroeta/Library/CloudStorage/OneDrive-UniversidadAdolfoIbanez/MasterDataScience/tesis/CNN-Change-Detection/workflow_CD/results/tabs/global_mc_sam.rds")
head(global_mc_sam)
dim(global_mc_sam)
